import os
import sys

try:
    import argparse
    from argcomplete import autocomplete
except:
    err = """
    You haven't installed the required dependencies.
    """
    print(err)
    sys.exit(0)

from .srbColour import Colour


class Args:
    def verify_file(file_path):
        if(not os.path.exists(file_path)):
            Colour.print('file not found : '+file_path,Colour.RED)
            sys.exit(1)

    def validate_args(parser):
        if parser.clean:
            if parser.file or parser.other or parser.test:
                Colour.print('no other argument is required with -c/--clean',Colour.YELLOW)
            return
        if parser.legacy: # legacy way
            new_args = [parser.file,parser.other,parser.test,parser.num,parser.id,parser.sec]
            if len(parser.legacy) > 0:
                parser.file = parser.legacy[0]
                Args.verify_file(parser.file)
            if len(parser.legacy) > 1:
                parser.other = parser.legacy[1]
                Args.verify_file(parser.other)
            if len(parser.legacy) > 2:
                parser.test = parser.legacy[2]
                Args.verify_file(parser.test)

        if not parser.file or not parser.other or not parser.test:
            if not parser.file:
                Colour.print('please provide input file name using -f/--file',Colour.RED)
            if not parser.other:
                Colour.print('please provide tester file name using -o/--other',Colour.RED)
            if not parser.test:
                Colour.print('please provide test generator name using -t/--test',Colour.RED)
            sys.exit(1)


    def _is_valid_file(parser, arg):
        if not os.path.exists(arg):
            parser.error("The file %s does not exist!" % arg)
        else:
            return arg


    def get_parser():
        parser = argparse.ArgumentParser()

        parser.add_argument("-f", "--file",
                            # required=True,
                            type=lambda x: Args._is_valid_file(parser,x),
                            help="Input file name, ex: one.cpp")
        parser.add_argument("-o", "--other",
                            type=lambda x: Args._is_valid_file(parser,x),
                            help="Other input file name, ex: brute.cpp")
        parser.add_argument("-t", "--test",
                            type=lambda x: Args._is_valid_file(parser,x),
                            help="Test generator, ex: testgen.py")
        parser.add_argument("-i", "--id",
                            default = "0",
                            help="Unique_id, ex: 111")
        parser.add_argument("-n", "--num",
                            type=int,
                            default = 10000,
                            help="Maximum number of test cases, ex: 1000")
        parser.add_argument("-s", "--sec",
                            type=int,
                            default = 10,
                            help="Maximum time in seconds for a test file, ex: 4")
        parser.add_argument("-c", "--clean",
                            action='store_true',
                            help="Clean the files generated by tester")

        parser.add_argument("legacy",nargs='*',
                            help="legacy way of args")

        autocomplete(parser)
        parsed_args = parser.parse_args()
        Args.validate_args(parsed_args)
        return parsed_args
